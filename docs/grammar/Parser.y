%namespace PySharpGrammarCheck
%token
ID INTEGER_VALUE BOOL CHAR CLASS CONST ELSE ENUM FALSE
IF INT PRIVATE PUBLIC RETURN STATIC TRUE
COMMA ASSIGNMENT LEFT_PAREN RIGHT_PAREN
LEFT_BRACE RIGHT_BRACE LEFT_BRACKET
RIGHT_BRACKET PLUS MINUS MULTIPLICATION DIV MOD
NOT AND OR LT GT GTE LTE LINE_END
BLOCK_START BLOCK_END PASS EQUAL DOT
%start PS_PROGRAM
%%

PS_PROGRAM : CLASS_DEF EOF
           ;

CLASS_DEF : CLASS ID CLASS_BODY
          ;

CLASS_BODY : BLOCK_START LINE_END FIELD_DECLARATIONS LINE_END METHOD_DECLARATIONS BLOCK_END
           ;

FIELD_DECLARATIONS : FIELD_DECLARATION LINE_END
                   | FIELD_DECLARATION LINE_END FIELD_DECLARATIONS
                   ;

FIELD_DECLARATION : VISIBILITY_MODIFIER STATIC_MODIFIER TYPE_DEFINITION ID
                  ;

VISIBILITY_MODIFIER : PUBLIC
                    | PRIVATE
                    ;

STATIC_MODIFIER : STATIC
                | /* eps */
                ;

TYPE_DEFINITION : BOOL
                | CHAR
                | INT
                ;

METHOD_DECLARATIONS : METHOD_DECLARATION LINE_END
                    | METHOD_DECLARATION LINE_END LINE_END METHOD_DECLARATIONS
                    ;

METHOD_DECLARATION : METHOD_HEADER BLOCK_START STATEMENTS_BLOCK BLOCK_END
                   ;

METHOD_HEADER : VISIBILITY_MODIFIER STATIC_MODIFIER TYPE_DEFINITION ID METHOD_ARGS
              ;

METHOD_ARGS : LEFT_PAREN ARGUMENTS_DEFINITION RIGHT_PAREN
            ;

ARGUMENTS_DEFINITION : ARGUMENT_DEFINITION
                     | ARGUMENT_DEFINITION COMMA ARGUMENTS_DEFINITION
                     ;

ARGUMENT_DEFINITION : TYPE_DEFINITION ID
                    ;

STATEMENTS_BLOCK : STATEMENTS
                 | PASS LINE_END
                 ;

STATEMENTS : STATEMENT
           | STATEMENT STATEMENTS
           ;

STATEMENT : EXPRESSION_STATEMENT
          | IF_STATEMENT
          | ASSIGN_STATEMENT LINE_END
          ;

EXPRESSION_STATEMENT : EXPRESSION LINE_END
                     ;

ASSIGN_STATEMENT : ID ASSIGNMENT EXPRESSION
                 ;

IF_STATEMENT : IF_THEN_STATEMENT
             | IF_THEN_STATEMENT ELSE BLOCK_START STATEMENTS_BLOCK BLOCK_END
             ;

IF_THEN_STATEMENT : IF LEFT_PAREN CONDITION_EXPR RIGHT_PAREN BLOCK_START STATEMENTS_BLOCK BLOCK_END
                  ;

EXPRESSION : TERM EXPRESSION_S
           | FUNC_CALL
           ;

EXPRESSION_S : FIRST_PREC_OPERATOR TERM EXPRESSION_S
             | /* eps */
             ;

TERM : SIMPLE_TERM TERM_S
     | /* eps */
     ;

TERM_S : SECOND_PREC_OPERATOR SIMPLE_TERM TERM_S
       | /* eps */
       ;

SIMPLE_TERM : LEFT_PAREN EXPRESSION RIGHT_PAREN
            | ID
            | INTEGER_VALUE
            ;

FIRST_PREC_OPERATOR : PLUS
                    | MINUS
                    ;

SECOND_PREC_OPERATOR : MULTIPLICATION
                     | DIV
                     | MOD
                     ;

FUNC_CALL : THIS_METHOD_CALL
          | EXTERNAL_METHOD_CALL
          ;

THIS_METHOD_CALL : ID CALL_ARGS
                 ;

EXTERNAL_METHOD_CALL : ID DOT ID CALL_ARGS
                     ;

CALL_ARGS : LEFT_PAREN CALL_ARGS_LIST RIGHT_PAREN
          | LEFT_PAREN RIGHT_PAREN
          ;

CALL_ARGS_LIST : CALL_ARG
               | CALL_ARG COMMA CALL_ARGS_LIST
               ;

CALL_ARG : CONDITION_EXPR
         | EXPRESSION
         ;

BOOL_VALUE : TRUE
           | FALSE
           ;

CONDITION_EXPR : FUNC_CALL
               | BOOL_VALUE
               | OR_TEST
               ;

OR_TEST : AND_TEST
        | AND_TEST OR OR_TEST
        ;

AND_TEST : NOT_TEST
         | NOT_TEST AND AND_TEST
         ;

NOT_TEST : NOT NOT_TEST
         | COMPARISON
         ;

COMPARISON : CONDITION_EXPR
           | CONDITION_EXPR COMPARE_OPERATION COMPARISON
           ;

COMPARE_OPERATION : LT | GT | GTE | LTE | EQUAL
                  ;
